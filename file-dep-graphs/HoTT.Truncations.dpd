N: 20 "BuildIsSurjection" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 10 "O_eq_Tr" [body=yes, kind=cnst, prop=no, path="SeparatedTrunc", ];
N: 9 "O_leq_Tr" [body=yes, kind=cnst, prop=no, path="SeparatedTrunc", ];
N: 13 "O_leq_Tr_leq" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 7 "O_lex_leq_Tr" [body=yes, kind=cnst, prop=no, path="SeparatedTrunc", ];
N: 8 "O_strong_leq_Tr" [body=yes, kind=cnst, prop=no, path="SeparatedTrunc", ];
N: 44 "Tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 39 "Trunc_functor" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 35 "Trunc_functor_compose" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 36 "Trunc_functor_equiv" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 34 "Trunc_functor_idmap" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 37 "Trunc_functor_isequiv" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 1 "Trunc_ind" [body=yes, kind=cnst, prop=no, path="Core.Trunc", ];
N: 12 "Trunc_min" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 46 "Trunc_rec" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 45 "Trunc_rec_tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 11 "Trunc_swap" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 17 "cancelR_issurjection" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 66 "conn_point_elim" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 67 "conn_point_incl" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 68 "conn_pointed_type" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 22 "contr_inhab_prop" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 32 "equiv_Trunc_prod_cmp" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 55 "equiv_component_image_unit" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 18 "equiv_merely_issurjection" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 5 "equiv_path_Tr" [body=yes, kind=cnst, prop=no, path="SeparatedTrunc", ];
N: 41 "equiv_tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 25 "hexists" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 23 "himage" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 24 "hor" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 19 "iff_merely_issurjection" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 30 "inO_tr_istrunc" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 54 "indecomposable_0connected" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 57 "is0connected_component" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 61 "is0connected_isconnected" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 58 "is0connected_merely_allpath" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 38 "is0functor_Tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 31 "is1functor_Tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 52 "isconn_wedge_incl" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 69 "isconnected_paths" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 65 "isconnected_pred" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 64 "isconnected_pred_add" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 63 "isconnected_pred_add'" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 53 "isconnected_trunc" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 60 "isconnmap_pred_add" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 14 "isembedding_precompose_surjection_hset" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 33 "isequiv_Trunc_functor" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 15 "isequiv_surj_emb" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 42 "isequiv_tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 16 "issurj_retr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 70 "istrunc_extension_along_conn" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 29 "istrunc_inO_tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 2 "istrunc_truncation" [body=no, kind=cnst, prop=no, path="Core.Trunc", ];
N: 27 "istruncmap_mapinO_tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 28 "mapinO_tr_istruncmap" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 26 "merely" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 21 "merely_inhabited_iff_inhabited_stable" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 62 "merely_isconnected" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 56 "merely_path_component" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 59 "merely_path_is0connected" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 6 "path_Tr" [body=yes, kind=cnst, prop=no, path="SeparatedTrunc", ];
N: 43 "trunc_iff_isequiv_truncation" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 40 "untrunc_istrunc" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 50 "wedge_incl_comp1" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 49 "wedge_incl_comp2" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 48 "wedge_incl_comp3" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 51 "wedge_incl_elim" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 47 "wedge_incl_elim_uncurried" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 4 "Trunc" [kind=inductive, prop=no, path="Core.Trunc", ];
N: 3 "tr" [kind=construct, prop=no, path="Core.Trunc", ];
E: 1 3 [weight=2, ];
E: 1 4 [weight=9, ];
E: 2 4 [weight=1, ];
E: 5 3 [weight=2, ];
E: 5 7 [weight=1, ];
E: 5 8 [weight=1, ];
E: 5 10 [weight=1, ];
E: 5 44 [weight=4, ];
E: 6 3 [weight=2, ];
E: 6 10 [weight=1, ];
E: 6 44 [weight=4, ];
E: 7 8 [weight=3, ];
E: 7 29 [weight=6, ];
E: 7 44 [weight=20, ];
E: 7 46 [weight=4, ];
E: 8 9 [weight=1, ];
E: 8 44 [weight=6, ];
E: 9 29 [weight=1, ];
E: 9 30 [weight=1, ];
E: 9 44 [weight=5, ];
E: 10 29 [weight=2, ];
E: 10 30 [weight=1, ];
E: 10 44 [weight=11, ];
E: 11 12 [weight=2, ];
E: 11 44 [weight=17, ];
E: 12 2 [weight=1, ];
E: 12 3 [weight=3, ];
E: 12 4 [weight=4, ];
E: 12 13 [weight=1, ];
E: 12 39 [weight=1, ];
E: 12 41 [weight=1, ];
E: 12 44 [weight=20, ];
E: 13 44 [weight=4, ];
E: 14 30 [weight=1, ];
E: 14 44 [weight=3, ];
E: 15 44 [weight=3, ];
E: 16 2 [weight=1, ];
E: 16 3 [weight=1, ];
E: 16 44 [weight=3, ];
E: 17 2 [weight=1, ];
E: 17 39 [weight=1, ];
E: 17 44 [weight=6, ];
E: 18 2 [weight=1, ];
E: 18 19 [weight=1, ];
E: 18 26 [weight=3, ];
E: 18 44 [weight=3, ];
E: 19 2 [weight=1, ];
E: 19 26 [weight=4, ];
E: 19 44 [weight=7, ];
E: 20 2 [weight=1, ];
E: 20 26 [weight=2, ];
E: 20 44 [weight=3, ];
E: 21 1 [weight=1, ];
E: 21 3 [weight=1, ];
E: 21 4 [weight=3, ];
E: 21 44 [weight=3, ];
E: 22 2 [weight=1, ];
E: 22 26 [weight=3, ];
E: 22 30 [weight=1, ];
E: 22 44 [weight=1, ];
E: 23 44 [weight=3, ];
E: 24 26 [weight=1, ];
E: 25 26 [weight=1, ];
E: 26 2 [weight=1, ];
E: 26 44 [weight=1, ];
E: 27 44 [weight=2, ];
E: 28 44 [weight=1, ];
E: 29 44 [weight=2, ];
E: 30 44 [weight=1, ];
E: 31 34 [weight=1, ];
E: 31 35 [weight=1, ];
E: 31 38 [weight=2, ];
E: 31 44 [weight=3, ];
E: 32 44 [weight=4, ];
E: 33 39 [weight=1, ];
E: 33 44 [weight=3, ];
E: 34 39 [weight=1, ];
E: 34 44 [weight=5, ];
E: 35 39 [weight=3, ];
E: 35 44 [weight=9, ];
E: 36 44 [weight=3, ];
E: 37 39 [weight=1, ];
E: 37 44 [weight=3, ];
E: 38 39 [weight=1, ];
E: 38 44 [weight=2, ];
E: 39 44 [weight=3, ];
E: 40 42 [weight=1, ];
E: 40 44 [weight=1, ];
E: 41 3 [weight=1, ];
E: 41 4 [weight=1, ];
E: 41 42 [weight=1, ];
E: 41 44 [weight=1, ];
E: 42 3 [weight=1, ];
E: 42 4 [weight=1, ];
E: 42 43 [weight=1, ];
E: 43 3 [weight=1, ];
E: 43 4 [weight=1, ];
E: 43 44 [weight=1, ];
E: 44 1 [weight=2, ];
E: 44 2 [weight=1, ];
E: 44 3 [weight=10, ];
E: 44 4 [weight=24, ];
E: 45 1 [weight=1, ];
E: 45 2 [weight=5, ];
E: 45 3 [weight=5, ];
E: 45 4 [weight=16, ];
E: 45 46 [weight=4, ];
E: 46 1 [weight=1, ];
E: 46 4 [weight=3, ];
E: 47 44 [weight=4, ];
E: 47 51 [weight=1, ];
E: 48 44 [weight=4, ];
E: 48 49 [weight=1, ];
E: 48 50 [weight=1, ];
E: 48 51 [weight=2, ];
E: 48 52 [weight=1, ];
E: 49 44 [weight=4, ];
E: 49 51 [weight=1, ];
E: 49 52 [weight=1, ];
E: 50 44 [weight=4, ];
E: 50 51 [weight=1, ];
E: 50 52 [weight=1, ];
E: 51 44 [weight=4, ];
E: 51 52 [weight=1, ];
E: 52 44 [weight=5, ];
E: 52 67 [weight=2, ];
E: 52 70 [weight=1, ];
E: 53 11 [weight=1, ];
E: 53 44 [weight=19, ];
E: 54 1 [weight=5, ];
E: 54 4 [weight=10, ];
E: 54 26 [weight=6, ];
E: 54 44 [weight=5, ];
E: 54 46 [weight=2, ];
E: 54 59 [weight=2, ];
E: 54 65 [weight=1, ];
E: 55 26 [weight=3, ];
E: 55 36 [weight=1, ];
E: 55 44 [weight=31, ];
E: 56 1 [weight=2, ];
E: 56 2 [weight=3, ];
E: 56 3 [weight=9, ];
E: 56 4 [weight=4, ];
E: 56 26 [weight=30, ];
E: 57 1 [weight=2, ];
E: 57 2 [weight=3, ];
E: 57 3 [weight=17, ];
E: 57 4 [weight=10, ];
E: 57 26 [weight=35, ];
E: 57 44 [weight=1, ];
E: 58 1 [weight=3, ];
E: 58 2 [weight=2, ];
E: 58 3 [weight=3, ];
E: 58 4 [weight=5, ];
E: 58 5 [weight=1, ];
E: 58 26 [weight=4, ];
E: 58 44 [weight=13, ];
E: 59 26 [weight=2, ];
E: 59 44 [weight=3, ];
E: 59 69 [weight=1, ];
E: 60 44 [weight=5, ];
E: 60 64 [weight=1, ];
E: 61 44 [weight=3, ];
E: 61 63 [weight=1, ];
E: 62 26 [weight=1, ];
E: 62 44 [weight=3, ];
E: 62 63 [weight=1, ];
E: 63 44 [weight=4, ];
E: 63 64 [weight=1, ];
E: 64 44 [weight=9, ];
E: 64 65 [weight=1, ];
E: 65 29 [weight=1, ];
E: 65 30 [weight=1, ];
E: 65 44 [weight=6, ];
E: 66 1 [weight=1, ];
E: 66 4 [weight=2, ];
E: 66 44 [weight=5, ];
E: 66 69 [weight=1, ];
E: 67 7 [weight=1, ];
E: 67 8 [weight=1, ];
E: 67 44 [weight=8, ];
E: 68 9 [weight=1, ];
E: 68 10 [weight=1, ];
E: 68 44 [weight=8, ];
E: 69 3 [weight=6, ];
E: 69 5 [weight=1, ];
E: 69 44 [weight=9, ];
E: 70 30 [weight=2, ];
E: 70 44 [weight=5, ];
