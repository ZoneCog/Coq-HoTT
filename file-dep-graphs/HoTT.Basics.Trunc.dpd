N: 25 "IsTruncMap" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 20 "TruncType_ind" [body=yes, kind=cnst, prop=yes, path="Trunc", ];
N: 19 "TruncType_rec" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 21 "TruncType_rect" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 18 "TruncType_sind" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 6 "contr_forall" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 14 "contr_inhabited_hprop" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 2 "contr_istrunc" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 34 "contr_istrunc_minus_two" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 15 "default_TruncType" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 1 "equiv_contr_hprop" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 8 "equiv_iff_hprop" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 9 "equiv_iff_hprop_uncurried" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 11 "hprop_allpath" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 13 "hprop_inhabited_contr" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 7 "iff_contr_hprop" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 60 "int_to_trunc_index" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 10 "isequiv_iff_hprop" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 4 "ishprop_istrunc" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 3 "ishprop_istruncmap" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 30 "istrunc_contr" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 26 "istrunc_equiv_istrunc" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 5 "istrunc_forall" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 29 "istrunc_hprop" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 28 "istrunc_hset" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 27 "istrunc_isequiv_istrunc" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 31 "istrunc_leq" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 33 "istrunc_paths'" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 32 "istrunc_succ" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 24 "istruncmap_fiber" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 62 "nat_to_trunc_index" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 59 "num_int_to_trunc_index" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 12 "path_ishprop" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 55 "trunc_index_add" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 52 "trunc_index_add_comm" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 54 "trunc_index_add_minus_two" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 53 "trunc_index_add_succ" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 66 "trunc_index_inc" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 65 "trunc_index_inc'" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 61 "trunc_index_inc'_0n" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 64 "trunc_index_inc'_succ" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 63 "trunc_index_inc_agree" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 51 "trunc_index_leq" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 42 "trunc_index_leq_add" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 41 "trunc_index_leq_add'" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 46 "trunc_index_leq_minus_two" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 50 "trunc_index_leq_minus_two_n" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 44 "trunc_index_leq_refl" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 49 "trunc_index_leq_succ" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 45 "trunc_index_leq_succ'" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 43 "trunc_index_leq_transitive" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 40 "trunc_index_min" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 36 "trunc_index_min_leq_left" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 35 "trunc_index_min_leq_right" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 39 "trunc_index_min_minus_two" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 37 "trunc_index_min_path" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 38 "trunc_index_min_swap" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 48 "trunc_index_pred" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 47 "trunc_index_succ_pred" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 57 "trunc_index_to_int" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 58 "trunc_index_to_little_uint" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 56 "trunc_index_to_num_int" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 16 "trunctype_istrunc" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 17 "trunctype_type" [body=yes, kind=cnst, prop=no, path="Trunc", ];
N: 23 "TruncType" [kind=inductive, prop=no, path="Trunc", ];
N: 22 "Build_TruncType" [kind=construct, prop=no, path="Trunc", ];
E: 1 4 [weight=1, ];
E: 1 7 [weight=1, ];
E: 1 9 [weight=1, ];
E: 2 4 [weight=1, ];
E: 2 14 [weight=1, ];
E: 3 4 [weight=1, ];
E: 3 11 [weight=1, ];
E: 3 12 [weight=1, ];
E: 3 25 [weight=4, ];
E: 4 5 [weight=2, ];
E: 4 11 [weight=1, ];
E: 4 26 [weight=2, ];
E: 5 6 [weight=1, ];
E: 5 27 [weight=1, ];
E: 7 14 [weight=1, ];
E: 8 9 [weight=1, ];
E: 9 12 [weight=2, ];
E: 10 12 [weight=2, ];
E: 15 22 [weight=1, ];
E: 15 23 [weight=1, ];
E: 16 23 [weight=2, ];
E: 17 23 [weight=2, ];
E: 18 22 [weight=2, ];
E: 18 23 [weight=4, ];
E: 19 21 [weight=1, ];
E: 19 22 [weight=1, ];
E: 19 23 [weight=3, ];
E: 20 22 [weight=2, ];
E: 20 23 [weight=4, ];
E: 21 22 [weight=2, ];
E: 21 23 [weight=4, ];
E: 24 25 [weight=2, ];
E: 26 27 [weight=1, ];
E: 28 31 [weight=1, ];
E: 29 31 [weight=1, ];
E: 30 31 [weight=1, ];
E: 31 32 [weight=1, ];
E: 31 51 [weight=11, ];
E: 32 33 [weight=1, ];
E: 35 40 [weight=7, ];
E: 35 51 [weight=7, ];
E: 36 40 [weight=7, ];
E: 36 51 [weight=7, ];
E: 37 40 [weight=34, ];
E: 38 39 [weight=1, ];
E: 38 40 [weight=21, ];
E: 39 40 [weight=2, ];
E: 41 42 [weight=1, ];
E: 41 51 [weight=2, ];
E: 41 52 [weight=1, ];
E: 41 55 [weight=3, ];
E: 42 43 [weight=1, ];
E: 42 44 [weight=1, ];
E: 42 49 [weight=1, ];
E: 42 51 [weight=4, ];
E: 42 55 [weight=8, ];
E: 43 46 [weight=1, ];
E: 43 51 [weight=44, ];
E: 44 51 [weight=4, ];
E: 45 50 [weight=1, ];
E: 45 51 [weight=16, ];
E: 46 51 [weight=4, ];
E: 47 48 [weight=6, ];
E: 47 62 [weight=11, ];
E: 47 66 [weight=4, ];
E: 49 51 [weight=3, ];
E: 50 51 [weight=1, ];
E: 52 53 [weight=1, ];
E: 52 54 [weight=1, ];
E: 52 55 [weight=14, ];
E: 53 55 [weight=30, ];
E: 54 55 [weight=6, ];
E: 56 57 [weight=1, ];
E: 57 58 [weight=1, ];
E: 59 60 [weight=1, ];
E: 60 62 [weight=1, ];
E: 61 62 [weight=10, ];
E: 61 64 [weight=1, ];
E: 61 65 [weight=6, ];
E: 61 66 [weight=3, ];
E: 62 66 [weight=1, ];
E: 63 64 [weight=1, ];
E: 63 65 [weight=11, ];
E: 63 66 [weight=7, ];
E: 64 65 [weight=9, ];
