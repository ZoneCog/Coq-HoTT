N: 14 "Build_IsCocommutativeComonoidObject" [body=yes, kind=cnst, prop=no, path="MonoidObject", ];
N: 22 "Build_IsComonoidObject" [body=yes, kind=cnst, prop=no, path="MonoidObject", ];
N: 16 "IsCocommutativeComonoidObject" [body=yes, kind=cnst, prop=no, path="MonoidObject", ];
N: 29 "IsCommutativeMonoidObject_ind" [body=yes, kind=cnst, prop=yes, path="MonoidObject", ];
N: 28 "IsCommutativeMonoidObject_rec" [body=yes, kind=cnst, prop=no, path="MonoidObject", ];
N: 30 "IsCommutativeMonoidObject_rect" [body=yes, kind=cnst, prop=no, path="MonoidObject", ];
N: 27 "IsCommutativeMonoidObject_sind" [body=yes, kind=cnst, prop=no, path="MonoidObject", ];
N: 24 "IsComonoidObject" [body=yes, kind=cnst, prop=no, path="MonoidObject", ];
N: 40 "IsMonoidObject_ind" [body=yes, kind=cnst, prop=yes, path="MonoidObject", ];
N: 39 "IsMonoidObject_rec" [body=yes, kind=cnst, prop=no, path="MonoidObject", ];
N: 41 "IsMonoidObject_rect" [body=yes, kind=cnst, prop=no, path="MonoidObject", ];
N: 38 "IsMonoidObject_sind" [body=yes, kind=cnst, prop=no, path="MonoidObject", ];
N: 7 "associative_hom" [body=yes, kind=cnst, prop=no, path="MonoidObject", ];
N: 12 "cco_cocomm" [body=yes, kind=cnst, prop=no, path="MonoidObject", ];
N: 10 "cmo_coco_op" [body=yes, kind=cnst, prop=no, path="MonoidObject", ];
N: 25 "cmo_comm" [body=yes, kind=cnst, prop=no, path="MonoidObject", ];
N: 26 "cmo_mo" [body=yes, kind=cnst, prop=no, path="MonoidObject", ];
N: 13 "co_cco" [body=yes, kind=cnst, prop=no, path="MonoidObject", ];
N: 19 "co_coassoc" [body=yes, kind=cnst, prop=no, path="MonoidObject", ];
N: 21 "co_comult" [body=yes, kind=cnst, prop=no, path="MonoidObject", ];
N: 20 "co_counit" [body=yes, kind=cnst, prop=no, path="MonoidObject", ];
N: 18 "co_left_counit" [body=yes, kind=cnst, prop=no, path="MonoidObject", ];
N: 17 "co_right_counit" [body=yes, kind=cnst, prop=no, path="MonoidObject", ];
N: 2 "commutative_hom" [body=yes, kind=cnst, prop=no, path="MonoidObject", ];
N: 15 "iscommuatativemonoid_cocomutativemonoid_op" [body=yes, kind=cnst, prop=no, path="MonoidObject", ];
N: 1 "iscommutativemonoid_hom" [body=yes, kind=cnst, prop=no, path="MonoidObject", ];
N: 23 "ismonoid_comonoid_op" [body=yes, kind=cnst, prop=no, path="MonoidObject", ];
N: 3 "ismonoid_hom" [body=yes, kind=cnst, prop=no, path="MonoidObject", ];
N: 4 "issemigroup_hom" [body=yes, kind=cnst, prop=no, path="MonoidObject", ];
N: 6 "leftidentity_hom" [body=yes, kind=cnst, prop=no, path="MonoidObject", ];
N: 35 "mo_assoc" [body=yes, kind=cnst, prop=no, path="MonoidObject", ];
N: 11 "mo_co_op" [body=yes, kind=cnst, prop=no, path="MonoidObject", ];
N: 34 "mo_left_unit" [body=yes, kind=cnst, prop=no, path="MonoidObject", ];
N: 37 "mo_mult" [body=yes, kind=cnst, prop=no, path="MonoidObject", ];
N: 33 "mo_right_unit" [body=yes, kind=cnst, prop=no, path="MonoidObject", ];
N: 36 "mo_unit" [body=yes, kind=cnst, prop=no, path="MonoidObject", ];
N: 8 "monunit_hom" [body=yes, kind=cnst, prop=no, path="MonoidObject", ];
N: 5 "rightidentity_hom" [body=yes, kind=cnst, prop=no, path="MonoidObject", ];
N: 9 "sgop_hom" [body=yes, kind=cnst, prop=no, path="MonoidObject", ];
N: 32 "IsCommutativeMonoidObject" [kind=inductive, prop=no, path="MonoidObject", ];
N: 43 "IsMonoidObject" [kind=inductive, prop=no, path="MonoidObject", ];
N: 31 "Build_IsCommutativeMonoidObject" [kind=construct, prop=no, path="MonoidObject", ];
N: 42 "Build_IsMonoidObject" [kind=construct, prop=no, path="MonoidObject", ];
E: 1 2 [weight=1, ];
E: 1 3 [weight=1, ];
E: 1 8 [weight=2, ];
E: 1 9 [weight=2, ];
E: 1 32 [weight=2, ];
E: 2 9 [weight=4, ];
E: 2 32 [weight=2, ];
E: 3 4 [weight=1, ];
E: 3 5 [weight=1, ];
E: 3 6 [weight=1, ];
E: 3 8 [weight=2, ];
E: 3 9 [weight=2, ];
E: 3 43 [weight=2, ];
E: 4 7 [weight=1, ];
E: 4 9 [weight=2, ];
E: 4 43 [weight=2, ];
E: 5 8 [weight=4, ];
E: 5 9 [weight=3, ];
E: 5 43 [weight=2, ];
E: 6 8 [weight=4, ];
E: 6 9 [weight=3, ];
E: 6 43 [weight=2, ];
E: 7 9 [weight=6, ];
E: 7 43 [weight=2, ];
E: 8 43 [weight=2, ];
E: 9 43 [weight=2, ];
E: 10 11 [weight=1, ];
E: 10 12 [weight=1, ];
E: 10 13 [weight=1, ];
E: 10 16 [weight=2, ];
E: 10 31 [weight=1, ];
E: 10 32 [weight=1, ];
E: 11 17 [weight=1, ];
E: 11 18 [weight=1, ];
E: 11 19 [weight=1, ];
E: 11 20 [weight=13, ];
E: 11 21 [weight=29, ];
E: 11 24 [weight=2, ];
E: 11 42 [weight=1, ];
E: 11 43 [weight=1, ];
E: 12 13 [weight=2, ];
E: 12 15 [weight=1, ];
E: 12 16 [weight=2, ];
E: 12 21 [weight=2, ];
E: 13 15 [weight=1, ];
E: 13 16 [weight=2, ];
E: 13 24 [weight=1, ];
E: 14 16 [weight=1, ];
E: 14 21 [weight=4, ];
E: 14 23 [weight=1, ];
E: 14 24 [weight=2, ];
E: 14 31 [weight=1, ];
E: 15 16 [weight=2, ];
E: 15 32 [weight=1, ];
E: 16 32 [weight=1, ];
E: 17 20 [weight=6, ];
E: 17 21 [weight=6, ];
E: 17 23 [weight=1, ];
E: 17 24 [weight=2, ];
E: 18 20 [weight=6, ];
E: 18 21 [weight=6, ];
E: 18 23 [weight=1, ];
E: 18 24 [weight=2, ];
E: 19 21 [weight=20, ];
E: 19 23 [weight=1, ];
E: 19 24 [weight=2, ];
E: 20 23 [weight=1, ];
E: 20 24 [weight=2, ];
E: 21 23 [weight=1, ];
E: 21 24 [weight=2, ];
E: 22 24 [weight=1, ];
E: 22 42 [weight=1, ];
E: 23 24 [weight=2, ];
E: 23 43 [weight=1, ];
E: 24 43 [weight=1, ];
E: 25 32 [weight=2, ];
E: 26 32 [weight=2, ];
E: 26 43 [weight=1, ];
E: 27 31 [weight=2, ];
E: 27 32 [weight=4, ];
E: 27 43 [weight=2, ];
E: 28 30 [weight=1, ];
E: 28 31 [weight=1, ];
E: 28 32 [weight=3, ];
E: 28 43 [weight=1, ];
E: 29 31 [weight=2, ];
E: 29 32 [weight=4, ];
E: 29 43 [weight=2, ];
E: 30 31 [weight=2, ];
E: 30 32 [weight=4, ];
E: 30 43 [weight=2, ];
E: 31 43 [weight=1, ];
E: 32 43 [weight=1, ];
E: 33 43 [weight=2, ];
E: 34 43 [weight=2, ];
E: 35 43 [weight=2, ];
E: 36 43 [weight=2, ];
E: 37 43 [weight=2, ];
E: 38 42 [weight=2, ];
E: 38 43 [weight=4, ];
E: 39 41 [weight=1, ];
E: 39 42 [weight=1, ];
E: 39 43 [weight=3, ];
E: 40 42 [weight=2, ];
E: 40 43 [weight=4, ];
E: 41 42 [weight=2, ];
E: 41 43 [weight=4, ];
