N: 14 "BuildIsSurjection" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 7 "O_leq_Tr_leq" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 38 "Tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 33 "Trunc_functor" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 29 "Trunc_functor_compose" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 30 "Trunc_functor_equiv" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 28 "Trunc_functor_idmap" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 31 "Trunc_functor_isequiv" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 1 "Trunc_ind" [body=yes, kind=cnst, prop=no, path="Core.Trunc", ];
N: 6 "Trunc_min" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 40 "Trunc_rec" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 39 "Trunc_rec_tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 5 "Trunc_swap" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 11 "cancelR_issurjection" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 16 "contr_inhab_prop" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 26 "equiv_Trunc_prod_cmp" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 12 "equiv_merely_issurjection" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 35 "equiv_tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 19 "hexists" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 17 "himage" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 18 "hor" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 13 "iff_merely_issurjection" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 24 "inO_tr_istrunc" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 32 "is0functor_Tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 25 "is1functor_Tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 8 "isembedding_precompose_surjection_hset" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 27 "isequiv_Trunc_functor" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 9 "isequiv_surj_emb" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 36 "isequiv_tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 10 "issurj_retr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 23 "istrunc_inO_tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 2 "istrunc_truncation" [body=no, kind=cnst, prop=no, path="Core.Trunc", ];
N: 21 "istruncmap_mapinO_tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 22 "mapinO_tr_istruncmap" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 20 "merely" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 15 "merely_inhabited_iff_inhabited_stable" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 37 "trunc_iff_isequiv_truncation" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 34 "untrunc_istrunc" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 4 "Trunc" [kind=inductive, prop=no, path="Core.Trunc", ];
N: 3 "tr" [kind=construct, prop=no, path="Core.Trunc", ];
E: 1 3 [weight=2, ];
E: 1 4 [weight=9, ];
E: 2 4 [weight=1, ];
E: 5 6 [weight=2, ];
E: 5 38 [weight=17, ];
E: 6 2 [weight=1, ];
E: 6 3 [weight=3, ];
E: 6 4 [weight=4, ];
E: 6 7 [weight=1, ];
E: 6 33 [weight=1, ];
E: 6 35 [weight=1, ];
E: 6 38 [weight=20, ];
E: 7 38 [weight=4, ];
E: 8 24 [weight=1, ];
E: 8 38 [weight=3, ];
E: 9 38 [weight=3, ];
E: 10 2 [weight=1, ];
E: 10 3 [weight=1, ];
E: 10 38 [weight=3, ];
E: 11 2 [weight=1, ];
E: 11 33 [weight=1, ];
E: 11 38 [weight=6, ];
E: 12 2 [weight=1, ];
E: 12 13 [weight=1, ];
E: 12 20 [weight=3, ];
E: 12 38 [weight=3, ];
E: 13 2 [weight=1, ];
E: 13 20 [weight=4, ];
E: 13 38 [weight=7, ];
E: 14 2 [weight=1, ];
E: 14 20 [weight=2, ];
E: 14 38 [weight=3, ];
E: 15 1 [weight=1, ];
E: 15 3 [weight=1, ];
E: 15 4 [weight=3, ];
E: 15 38 [weight=3, ];
E: 16 2 [weight=1, ];
E: 16 20 [weight=3, ];
E: 16 24 [weight=1, ];
E: 16 38 [weight=1, ];
E: 17 38 [weight=3, ];
E: 18 20 [weight=1, ];
E: 19 20 [weight=1, ];
E: 20 2 [weight=1, ];
E: 20 38 [weight=1, ];
E: 21 38 [weight=2, ];
E: 22 38 [weight=1, ];
E: 23 38 [weight=2, ];
E: 24 38 [weight=1, ];
E: 25 28 [weight=1, ];
E: 25 29 [weight=1, ];
E: 25 32 [weight=2, ];
E: 25 38 [weight=3, ];
E: 26 38 [weight=4, ];
E: 27 33 [weight=1, ];
E: 27 38 [weight=3, ];
E: 28 33 [weight=1, ];
E: 28 38 [weight=5, ];
E: 29 33 [weight=3, ];
E: 29 38 [weight=9, ];
E: 30 38 [weight=3, ];
E: 31 33 [weight=1, ];
E: 31 38 [weight=3, ];
E: 32 33 [weight=1, ];
E: 32 38 [weight=2, ];
E: 33 38 [weight=3, ];
E: 34 36 [weight=1, ];
E: 34 38 [weight=1, ];
E: 35 3 [weight=1, ];
E: 35 4 [weight=1, ];
E: 35 36 [weight=1, ];
E: 35 38 [weight=1, ];
E: 36 3 [weight=1, ];
E: 36 4 [weight=1, ];
E: 36 37 [weight=1, ];
E: 37 3 [weight=1, ];
E: 37 4 [weight=1, ];
E: 37 38 [weight=1, ];
E: 38 1 [weight=2, ];
E: 38 2 [weight=1, ];
E: 38 3 [weight=10, ];
E: 38 4 [weight=24, ];
E: 39 1 [weight=1, ];
E: 39 2 [weight=5, ];
E: 39 3 [weight=5, ];
E: 39 4 [weight=16, ];
E: 39 40 [weight=4, ];
E: 40 1 [weight=1, ];
E: 40 4 [weight=3, ];
