N: 42 "BinaryCoproduct" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 34 "Build_BinaryCoproduct" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 61 "Build_Coproduct" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 66 "Coproduct" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 48 "HasAllCoproducts" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 37 "HasBinaryCoproducts" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 50 "HasCoproducts" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 14 "associator_cat_bincoprod" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 36 "binary_coproducts" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 40 "cat_bincoprod" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 32 "cat_bincoprod_beta_inl" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 31 "cat_bincoprod_beta_inr" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 2 "cat_bincoprod_binprod" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 13 "cat_bincoprod_codiag" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 30 "cat_bincoprod_eta" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 29 "cat_bincoprod_eta_in" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 12 "cat_bincoprod_fmap01_rec" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 11 "cat_bincoprod_fmap10_rec" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 10 "cat_bincoprod_fmap11_rec" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 33 "cat_bincoprod_rec" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 9 "cat_bincoprod_rec_associator" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 28 "cat_bincoprod_rec_eta" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 17 "cat_bincoprod_swap" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 8 "cat_bincoprod_swap_rec" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 64 "cat_coprod" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 57 "cat_coprod_beta" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 52 "cat_coprod_codiag" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 56 "cat_coprod_eta" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 53 "cat_coprod_in_eta" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 3 "cat_coprod_prod" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 58 "cat_coprod_rec" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 54 "cat_coprod_rec_eta" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 67 "cat_coprod_rec_inv" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 63 "cat_in" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 39 "cat_inl" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 38 "cat_inr" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 62 "cat_isequiv_cat_coprod_rec_inv" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 16 "cate_bincoprod_swap" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 51 "cate_cat_coprod" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 59 "cate_cat_coprod_rec" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 60 "cate_cat_coprod_rec_inv" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 15 "cate_coprod_assoc" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 1 "coproduct_op" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 47 "has_all_coproducts" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 49 "has_coproducts" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 5 "hasallcoproducts_type" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 20 "hasbinarycoproducts_hasbinaryproducts_op" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 35 "hasbinarycoproducts_hascoproductsbool" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 21 "hasbinarycoproducts_op_hasbinaryproducts" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 4 "hasbinarycoproducts_type" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 18 "hasbinaryproducts_hasbinarycoproducts_op" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 19 "hasbinaryproducts_op_hasbinarycoproducts" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 46 "hasproductsop_hascoproducts" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 23 "is0bifunctor_cat_bincoprod" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 27 "is0functor_cat_bincoprod_l" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 25 "is0functor_cat_bincoprod_r" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 45 "is0functor_cat_coprod" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 22 "is1bifunctor_cat_bincoprod" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 26 "is1functor_cat_bincoprod_l" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 24 "is1functor_cat_bincoprod_r" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 44 "is1functor_cat_coprod" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 43 "isinitial_coprodempty" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 7 "ismonoidal_cat_bincoprod" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 6 "issymmetricmonoidal_cat_bincoprod" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 55 "natequiv_cat_coprod_rec_inv" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 41 "prod_co_bincoprod" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
N: 65 "prod_co_coprod" [body=yes, kind=cnst, prop=no, path="Coproducts", ];
E: 1 66 [weight=1, ];
E: 2 3 [weight=1, ];
E: 2 40 [weight=1, ];
E: 2 42 [weight=2, ];
E: 3 58 [weight=1, ];
E: 3 64 [weight=1, ];
E: 3 66 [weight=2, ];
E: 4 5 [weight=1, ];
E: 4 35 [weight=1, ];
E: 4 36 [weight=1, ];
E: 4 37 [weight=1, ];
E: 4 47 [weight=1, ];
E: 5 48 [weight=2, ];
E: 5 50 [weight=1, ];
E: 5 61 [weight=1, ];
E: 6 36 [weight=2, ];
E: 6 37 [weight=2, ];
E: 6 40 [weight=2, ];
E: 7 36 [weight=2, ];
E: 7 37 [weight=2, ];
E: 7 40 [weight=2, ];
E: 8 17 [weight=1, ];
E: 8 19 [weight=1, ];
E: 8 33 [weight=2, ];
E: 8 36 [weight=9, ];
E: 8 37 [weight=2, ];
E: 8 40 [weight=6, ];
E: 9 14 [weight=1, ];
E: 9 19 [weight=1, ];
E: 9 22 [weight=1, ];
E: 9 23 [weight=1, ];
E: 9 33 [weight=12, ];
E: 9 36 [weight=79, ];
E: 9 37 [weight=2, ];
E: 9 40 [weight=67, ];
E: 10 19 [weight=1, ];
E: 10 23 [weight=1, ];
E: 10 33 [weight=2, ];
E: 10 36 [weight=10, ];
E: 10 37 [weight=2, ];
E: 10 40 [weight=1, ];
E: 10 41 [weight=15, ];
E: 11 19 [weight=1, ];
E: 11 23 [weight=1, ];
E: 11 33 [weight=2, ];
E: 11 36 [weight=10, ];
E: 11 37 [weight=2, ];
E: 11 40 [weight=7, ];
E: 12 19 [weight=1, ];
E: 12 23 [weight=1, ];
E: 12 33 [weight=2, ];
E: 12 36 [weight=10, ];
E: 12 37 [weight=2, ];
E: 12 40 [weight=7, ];
E: 13 40 [weight=1, ];
E: 13 41 [weight=1, ];
E: 13 42 [weight=2, ];
E: 14 22 [weight=3, ];
E: 14 23 [weight=3, ];
E: 14 36 [weight=3, ];
E: 14 37 [weight=2, ];
E: 14 40 [weight=3, ];
E: 15 36 [weight=6, ];
E: 15 37 [weight=2, ];
E: 15 40 [weight=6, ];
E: 16 36 [weight=2, ];
E: 16 37 [weight=2, ];
E: 16 40 [weight=2, ];
E: 17 36 [weight=2, ];
E: 17 37 [weight=2, ];
E: 17 40 [weight=2, ];
E: 18 37 [weight=2, ];
E: 19 37 [weight=2, ];
E: 20 37 [weight=1, ];
E: 21 37 [weight=1, ];
E: 22 23 [weight=1, ];
E: 22 36 [weight=2, ];
E: 22 37 [weight=2, ];
E: 22 40 [weight=2, ];
E: 23 36 [weight=2, ];
E: 23 37 [weight=2, ];
E: 23 40 [weight=2, ];
E: 24 25 [weight=1, ];
E: 24 36 [weight=2, ];
E: 24 37 [weight=2, ];
E: 24 40 [weight=2, ];
E: 25 36 [weight=2, ];
E: 25 37 [weight=2, ];
E: 25 40 [weight=2, ];
E: 26 27 [weight=1, ];
E: 26 36 [weight=2, ];
E: 26 37 [weight=2, ];
E: 26 40 [weight=2, ];
E: 27 36 [weight=2, ];
E: 27 37 [weight=2, ];
E: 27 40 [weight=2, ];
E: 28 33 [weight=2, ];
E: 28 40 [weight=4, ];
E: 28 41 [weight=1, ];
E: 28 42 [weight=2, ];
E: 29 38 [weight=2, ];
E: 29 39 [weight=2, ];
E: 29 40 [weight=12, ];
E: 29 41 [weight=1, ];
E: 29 42 [weight=2, ];
E: 30 33 [weight=1, ];
E: 30 38 [weight=1, ];
E: 30 39 [weight=1, ];
E: 30 40 [weight=8, ];
E: 30 41 [weight=1, ];
E: 30 42 [weight=2, ];
E: 31 33 [weight=1, ];
E: 31 38 [weight=1, ];
E: 31 40 [weight=1, ];
E: 31 41 [weight=1, ];
E: 31 42 [weight=2, ];
E: 32 33 [weight=1, ];
E: 32 39 [weight=1, ];
E: 32 40 [weight=1, ];
E: 32 41 [weight=1, ];
E: 32 42 [weight=2, ];
E: 33 40 [weight=1, ];
E: 33 41 [weight=1, ];
E: 33 42 [weight=2, ];
E: 34 42 [weight=1, ];
E: 35 37 [weight=1, ];
E: 35 49 [weight=1, ];
E: 35 50 [weight=2, ];
E: 36 37 [weight=2, ];
E: 36 42 [weight=1, ];
E: 37 42 [weight=1, ];
E: 38 40 [weight=1, ];
E: 38 41 [weight=1, ];
E: 38 42 [weight=2, ];
E: 39 40 [weight=1, ];
E: 39 41 [weight=1, ];
E: 39 42 [weight=2, ];
E: 40 41 [weight=1, ];
E: 40 42 [weight=2, ];
E: 41 42 [weight=2, ];
E: 43 53 [weight=1, ];
E: 43 58 [weight=3, ];
E: 43 63 [weight=2, ];
E: 43 64 [weight=12, ];
E: 43 66 [weight=2, ];
E: 44 45 [weight=1, ];
E: 44 46 [weight=2, ];
E: 44 49 [weight=2, ];
E: 44 50 [weight=2, ];
E: 44 64 [weight=2, ];
E: 45 46 [weight=1, ];
E: 45 49 [weight=2, ];
E: 45 50 [weight=2, ];
E: 45 64 [weight=2, ];
E: 46 49 [weight=1, ];
E: 46 50 [weight=2, ];
E: 47 48 [weight=2, ];
E: 47 50 [weight=1, ];
E: 48 50 [weight=1, ];
E: 49 50 [weight=2, ];
E: 49 66 [weight=1, ];
E: 50 66 [weight=1, ];
E: 51 64 [weight=2, ];
E: 51 65 [weight=2, ];
E: 51 66 [weight=4, ];
E: 52 64 [weight=1, ];
E: 52 65 [weight=1, ];
E: 52 66 [weight=2, ];
E: 53 63 [weight=2, ];
E: 53 64 [weight=10, ];
E: 53 65 [weight=1, ];
E: 53 66 [weight=2, ];
E: 54 58 [weight=2, ];
E: 54 64 [weight=4, ];
E: 54 65 [weight=1, ];
E: 54 66 [weight=2, ];
E: 55 64 [weight=1, ];
E: 55 65 [weight=2, ];
E: 55 66 [weight=2, ];
E: 56 58 [weight=1, ];
E: 56 63 [weight=1, ];
E: 56 64 [weight=7, ];
E: 56 65 [weight=1, ];
E: 56 66 [weight=2, ];
E: 57 58 [weight=1, ];
E: 57 63 [weight=1, ];
E: 57 64 [weight=1, ];
E: 57 65 [weight=1, ];
E: 57 66 [weight=2, ];
E: 58 64 [weight=1, ];
E: 58 65 [weight=1, ];
E: 58 66 [weight=2, ];
E: 59 64 [weight=1, ];
E: 59 65 [weight=1, ];
E: 59 66 [weight=2, ];
E: 60 64 [weight=1, ];
E: 60 65 [weight=1, ];
E: 60 66 [weight=2, ];
E: 61 66 [weight=1, ];
E: 62 63 [weight=1, ];
E: 62 64 [weight=2, ];
E: 62 65 [weight=1, ];
E: 62 66 [weight=2, ];
E: 62 67 [weight=1, ];
E: 63 64 [weight=1, ];
E: 63 65 [weight=1, ];
E: 63 66 [weight=2, ];
E: 64 65 [weight=1, ];
E: 64 66 [weight=2, ];
E: 65 66 [weight=2, ];
